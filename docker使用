docker的服务启动是由systemctl进行控制，关于systemctl的使用另外再附上

1、获取镜像
从dockerhub获取镜像，命令格式：docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
docker pull ubuntu:16.04

2、运行镜像
docker run -it --rm ubuntu:16.04 bash

-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。
--rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。
ubuntu:18.04：这是指用 ubuntu:18.04 镜像为基础来启动容器。
bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。

使用exit可以退出当前容器环境

3、列举镜像
docker images ls
列表包含了 仓库名、标签、镜像 ID、创建时间 以及 所占用的空间，镜像 ID 则是镜像的唯一标识，一个镜像可以对应多个标签。

4、删除本地镜像
docker image rm [选项] <镜像1> [<镜像2> ...]

5、容器
1）启动和运行
docker run 容器名 操作
docker run ubuntu:18.04 /bin/echo 'Hello world'

启动交互模式：
docker run -t -i ubuntu:18.04 /bin/bash

-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。

2）启动终止的容器
docker container start

3）终止容器
docker container stop

4）查看容器状态
docker container ls -a

5）进入容器后台
执行docker run使用 -d 参数时，容器启动后会进入后台
进入容器：
  1）docker attach
如果从这个 stdin 中 exit，会导致容器的停止
  2）docker exec
后边可以跟多个参数，这里主要说明 -i -t 参数。
只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。
当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。
如果从这个 stdin 中 exit，不会导致容器的停止

6）删除容器
docker container rm

6、访问仓库
通过dockerhub注册账户，使用以下命令在Ubuntu中登录
docker login
以下命令退出登录
docker logout

查找官方镜像
docker search

push镜像（上传镜像）
docker push 镜像名
docker push username/ubuntu:18.04
用户也可以在登录后通过 docker push 命令来将自己的镜像推送到 Docker Hub。
上述命令中的 username 请替换为你的 Docker 账号用户名。


参考：
https://yeasy.gitbooks.io/docker_practice/repository/dockerhub.html
